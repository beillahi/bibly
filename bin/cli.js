#!/usr/bin/env node
"use strict";

const meow = require('meow');
const split = require('split');
const fs = require('fs-extra');
const getStdin = require('get-stdin');
const bibly = require('../lib/index');

let cli = meow(`
  Usage
    $ bibly

  Options
    --help            Show this message
    --sort            Sort entries by key

  Examples
    $ bibly
    $ bibly --sort
`, {
  default: {
    databases: {},
    latex: undefined
  }
});

(async () => {
  let entries;
  let code = 0;

  console.log(`${cli.pkg.name} version ${cli.pkg.version}`);

  try {
    Object.assign(cli.flags, fs.readJsonSync('bibly.json'));
  } catch (e) {
    console.log(`warning: could not read bibly.json`);
  }

  console.log(cli.flags);

  if (cli.flags.latex)
    entries = await bibly.getEntries(cli.flags.latex, cli.flags.databases);

  else if (!process.stdin.isTTY)
    entries = (await getStdin()).split("\n").filter(x => x);

  else
    cli.showHelp();

  if (cli.flags.sort)
    entries = entries.sort();

  let records = {};

  for (let obj of await Promise.all(entries.map(e => bibly.getRecord(e, cli.flags.databases)))) {
    if (!obj.record) {
      console.log(`unable to fetch entry: ${obj.key}`);
      if (obj.error) {
        console.log(obj.error);
        code++;
      }
    } else {
      records[obj.db] || (records[obj.db] = []);
      records[obj.db].push(obj.record)
    }
  }

  for (let db of Object.keys(cli.flags.databases))
    fs.writeFileSync(cli.flags.databases[db].file,
      `% generated by ${cli.pkg.name}: ${cli.pkg.homepage}\n\n` +
      (records[db]||[]).join('\n'));

  process.exit(code);
})();
